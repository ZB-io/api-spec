# ********RoostGPT********

# Test generated by RoostGPT for test claude-karate using AI Type Claude AI and AI Model claude-3-opus-20240229
# 
# Feature file generated for /nobelPrize/{category}/{year}_get for http method type GET 
# RoostTestHash=00eb351b13
# 
# 

# ********RoostGPT********
Feature: Nobel Prize API

Background:
  * def urlBase = karate.properties['url.base'] || karate.get('urlBase', 'http://localhost:8080')
  * url urlBase
  * def authToken = karate.get('authToken', '{{$processEnvironment.AUTH_TOKEN}}')

Scenario: Get Nobel Prize information for a valid category and year
  Given path '/2.1/nobelPrize/che/1989'
  And header Authorization = authToken
  When method GET
  Then status 200
  And match response == 
  """
  {
    "nobelPrize": {
      "awardYear": 1989,
      "category": {
        "en": "#string",
        "se": "#string", 
        "no": "#string"
      },
      "categoryFullName": {
        "en": "#string",
        "se": "#string",
        "no": "#string"  
      },
      "dateAwarded": "#? _ == null || /\\d{4}-\\d{2}-\\d{2}/.test(_)",
      "prizeAmount": "#number",
      "prizeAmountAdjusted": "#number",
      "topMotivation": {
        "en": "##string",
        "se": "##string",
        "no": "##string"
      },
      "laureates": "#[] laureate"
    }
  }
  """
  And match each response.nobelPrize.laureates ==
  """
  {
    "id": "#number",
    "name": {
      "en": "#string",
      "se": "##string",
      "no": "##string" 
    },
    "portion": "#string",
    "sortOrder": "#string",
    "motivation": {
      "en": "#string",
      "se": "##string", 
      "no": "##string"
    },
    "links": "#[] link"
  }
  """
  And match each response.nobelPrize.laureates.links == 
  """
  {
    "rel": "#string",
    "href": "#string",
    "action": "#string",
    "types": "#string"
  }
  """

Scenario: Get Nobel Prize information for an invalid category
  Given path '/2.1/nobelPrize/invalid/1989'
  And header Authorization = authToken  
  When method GET
  Then status 400
  And match response ==
  """
  {
    "code": "#string",
    "message": "#string"
  }
  """
  
Scenario: Get Nobel Prize information for a future year
  Given path '/2.1/nobelPrize/che/2100'
  And header Authorization = authToken
  When method GET 
  Then status 404
  And match response ==
  """
  {
    "code": "#string",
    "message": "#string"  
  }
  """
  
Scenario: Get Nobel Prize information with missing authorization token
  Given path '/2.1/nobelPrize/che/1989'
  When method GET
  Then status 401
