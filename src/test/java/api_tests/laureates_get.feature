# ********RoostGPT********

# Test generated by RoostGPT for test claude-karate using AI Type Claude AI and AI Model claude-3-opus-20240229
# 
# Feature file generated for /laureates_get for http method type GET 
# RoostTestHash=59fb209b6a
# 
# 

# ********RoostGPT********
Feature: /2.1/laureates API

Background:
* def urlBase = karate.properties['url.base'] || karate.get('urlBase', 'http://localhost:8080')
* url urlBase

Scenario: Get all laureates with default parameters
    Given path '/2.1/laureates'
    When method GET
    Then status 200
    And match response.laureates == '#array'
    And match each response.laureates contains
    """
        {
            "id": '#number',
            "wikipedia": {
                "slug": '#string',
                "english": '#string'
            },
            "wikidata": {
                "id": '#string',
                "url": '#string'
            },
            "sameAs": '##array',
            "links": '##array',
            "nobelPrizes": '#array'
        }
    """
    And match response.meta.count == '#number'
    And match response.links == '#array'

Scenario: Get laureates with pagination parameters
    * def offset = 10
    * def limit = 5
    Given path '/2.1/laureates'
    And param offset = offset
    And param limit = limit  
    When method GET
    Then status 200
    And match response.laureates == '#[5]'
    And match response.meta.offset == offset
    And match response.meta.limit == limit

Scenario: Get laureates sorted by name in ascending order
    Given path '/2.1/laureates'
    And param sort = 'asc'
    When method GET
    Then status 200
    And match response.meta.sort == 'asc'
    And match each response.laureates contains { laureateIfPerson: { fullName: { en: '#string' } } }
    And match response.laureates[*].laureateIfPerson.fullName.en == '#sorted'

Scenario: Search for laureates by name
    * def name = 'Marie'
    Given path '/2.1/laureates'
    And param name = name
    When method GET
    Then status 200
    And match response.laureates == '#array'
    And match each response.laureates contains { laureateIfPerson: { fullName: { en: '#regex Marie' } } }

Scenario: Search for laureates by gender
    Given path '/2.1/laureates'
    And param gender = 'female'
    When method GET
    Then status 200
    And match each response.laureates contains { laureateIfPerson: { gender: 'female' } }

Scenario: Get laureates by birth date
    * def birthDate = '1867-11-07'
    Given path '/2.1/laureates'
    And param birthDate = birthDate
    When method GET
    Then status 200
    And match each response.laureates contains { laureateIfPerson: { birth: { date: '#regex 1867-11-07' } } }

Scenario: Get laureates by Nobel Prize year
    * def year = 2020
    Given path '/2.1/laureates'
    And param nobelPrizeYear = year
    When method GET
    Then status 200
    And match each response.laureates[*].nobelPrizes contains { awardYear: year }
    
Scenario: Get laureates by Nobel Prize category
    Given path '/2.1/laureates'
    And param nobelPrizeCategory = 'phy'  
    When method GET
    Then status 200
    And match each response.laureates[*].nobelPrizes contains { category: { en: 'Physics' } }

Scenario: Get laureate by ID
    * def laureateId = 1
    Given path '/2.1/laureates'
    And param ID = laureateId
    When method GET
    Then status 200
    And match response.laureates[0].id == laureateId

Scenario: Invalid request - Missing required fields
    Given path '/2.1/laureates'
    And param yearTo = 1910
    When method GET
    Then status 400
    And match response == 
    """
        {
            "code": "400",
            "message": "#string"
        }
    """

Scenario: Invalid request - Laureate not found
    Given path '/2.1/laureates'
    And param ID = 999999
    When method GET
    Then status 404
    And match response ==
    """
        {
            "code": "404",
            "message": "#string"
        } 
    """
