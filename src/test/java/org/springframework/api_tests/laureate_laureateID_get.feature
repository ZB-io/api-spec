# ********RoostGPT********

# Test generated by RoostGPT for test karate using AI Type Azure Open AI and AI Model roostgpt-4-32k
# 
# Feature file generated for /laureate/{laureateID}_get for http method type GET 
# RoostTestHash=e702c0f931
# 
# 

# ********RoostGPT********
Feature: Validate API endpoint /2.1/laureate/{laureateID}

Background: 
    * def urlBase = karate.properties['url.base'] || karate.get('urlBase', 'http://localhost:8080')
    * url urlBase

Scenario: Successful retrieval of laureate information

  Given path '/2.1/laureate/', 1
  And headers { 'Authorization': karate.properties['AUTH_TOKEN'] }
  And request ''
  When method GET
  Then status 200
  And match each response == 
  """
  {
    "code": "#number",
    "message" : "#string",
    "laureateIfPerson": {
      "id": "#number",
      "knownName": {"en": "#string", "se": "#string", "false": "#string"},
      "givenName": {"en": "#string", "se": "#string", "false": "#string"},
      "familyName": {"en": "#string", "se": "#string", "false": "#string"},
      "fullName": {"en": "#string", "se": "#string", "false": "#string"},
      "filename": "#string",
      "penname": "#string",
      "gender": "#string",
      "birth": {
        "date": "#string",
      },
    }
  }
  """

Scenario: retrieve a non-existing laureate

  Given path '/2.1/laureate/', 199999
  And headers { 'Authorization': karate.properties['AUTH_TOKEN'] }
  And request ''
  When method GET
  Then status 404
  And match response == { "code": "#number", "message": "There is not Laureate born that date" }

Scenario: retrieve a laureate using wrong request method

  Given path '/2.1/laureate/', 1
  And headers { 'Authorization': karate.properties['AUTH_TOKEN'] }
  And request ''
  When method POST
  Then status 400
  And match response == { "code": "#number", "message": "Bad request.The request could not be understood by the server due to malformed syntax, modifications needed." }
