# ********RoostGPT********

# Test generated by RoostGPT for test claude-karate using AI Type Claude AI and AI Model claude-3-opus-20240229
# 
# Feature file generated for /laureates_get for http method type GET 
# RoostTestHash=59fb209b6a
# 
# 

# ********RoostGPT********
Feature: Nobel Prize Laureates API

Background:
  * url target

Scenario: Get all Nobel Prize Laureates
  Given path '/2.1/laureates'
  When method GET
  Then status 200
  And match response.laureates == '#array'
  And match each response.laureates contains
    """
    {
      id: '#number',
      wikipedia: {
        slug: '#string',
        english: '#string'
      },
      wikidata: {
        id: '#string',
        url: '#string'
      },
      sameAs: '##array',
      links: '##array',
      nobelPrizes: '##array'
    }
    """

Scenario: Get Laureates with valid query parameters
  * def query = { limit: 10, sort: 'desc', gender: 'female', birthCountry: 'Poland' }
  Given path '/2.1/laureates'
  And params query
  When method GET
  Then status 200
  And match response.laureates == '#array'
  And match response.laureates == '#[_ <= 10]'
  And match each response.laureates contains
    """
    {
      id: '#number',
      laureateIfPerson: {
        gender: 'female'
      }
    }
    """
  And match each response.laureates[*].laureateIfPerson.birth.place.country.en contains 'Poland'

Scenario: Get Laureates with invalid query parameters
  * def query = { limit: 'invalid', sort: 'wrong' }
  Given path '/2.1/laureates'
  And params query
  When method GET
  Then status 400
  And match response ==
    """
    {
      code: '#string',
      message: '#string'
    }
    """

Scenario: Get Laureate by ID
  * def laureateId = 456
  Given path '/2.1/laureates'
  And param ID = laureateId
  When method GET
  Then status 200
  And match response.laureates == '#[1]'
  And match response.laureates[0].id == laureateId

Scenario: Get non-existent Laureate
  * def laureateId = 999999
  Given path '/2.1/laureates'
  And param ID = laureateId
  When method GET
  Then status 404
  And match response ==
    """
    {
      code: '#string',
      message: '#string'
    }
    """
