# ********RoostGPT********

# Test generated by RoostGPT for test claude-karate using AI Type Claude AI and AI Model claude-3-opus-20240229
# 
# Feature file generated for /laureate/{laureateID}_get for http method type GET 
# RoostTestHash=81e2a40d4b
# 
# 

# ********RoostGPT********
Feature: Nobel Prize Laureate API

Background:
  * url target

Scenario: Get laureate information by ID
  * def laureateID = 456
  Given path '/2.1/laureate/', laureateID
  When method get
  Then status 200
  And match response == 
  """
  {
    "laureate": {
      "id": "#number",
      "laureateIfPerson": {
        "knownName": {
          "en": "#string",
          "se": "#string", 
          "no": "#string"
        },
        "givenName": {
          "en": "#string",
          "se": "#string",
          "no": "#string"  
        },
        "familyName": {
          "en": "#string",
          "se": "#string",
          "no": "#string"
        },
        "fullName": {
          "en": "#string",
          "se": "#string",
          "no": "#string"
        },
        "filename": "#string",
        "penname": "##string",
        "gender": "##string",
        "birth": {
          "date": "#? isDatetime(_)",
          "place": {
            "city": {
              "en": "#string",
              "se": "#string",
              "no": "#string"
            },
            "country": {
              "en": "#string", 
              "se": "#string",
              "no": "#string"
            },
            "cityNow": {
              "en": "#string",
              "se": "#string", 
              "no": "#string",
              "sameAs": "##array"
            },
            "countryNow": {
              "en": "#string",
              "se": "#string",
              "no": "#string",
              "sameAs": "##array"
            },
            "continent": {
              "en": "#string",
              "se": "#string",
              "no": "#string"
            },
            "locationString": {
              "en": "#string",
              "se": "#string",
              "no": "#string"
            }
          }
        },
        "death": {
          "date": "#? isDatetime(_)",
          "place": "#object"
        }
      },
      "wikipedia": {
        "slug": "#string",
        "english": "#string"
      },
      "wikidata": {
        "id": "#string",
        "url": "#string"
      },
      "sameAs": "#array",
      "links": "#array",
      "nobelPrizes": "#array"
    }
  }
  """

Scenario: Get laureate information for non-existent ID
  Given path '/2.1/laureate/999999'
  When method get
  Then status 404
  And match response == 
  """
  {
    "code": "#string",
    "message": "#string"
  }
  """

Scenario: Get laureate information with invalid ID format
  Given path '/2.1/laureate/abc'
  When method get
  Then status 400
  And match response ==
  """
  {
    "code": "#string",
    "message": "#string"  
  }
  """
