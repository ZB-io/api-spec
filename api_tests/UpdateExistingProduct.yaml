# ********RoostGPT********

# Test generated by RoostGPT for test karateIntegration using AI Type Azure Open AI and AI Model roost-gpt4-32k
# 
# ROOST_METHOD_HASH=d9b5f502f1
# ROOST_METHOD_SIG_HASH=3e3b381608
# 
#    ########## Scenario ##########  
# 
# {
#   background: 'Given the base URL is "http://localhost:8080"',
#   rule: null,
#   scenario: 'Update an existing product\r\n' +
#     '        Given there is an existing product with ID 1\r\n' +
#     '        And the client provides the following product data:\r\n' +
#     '            | name            | description                      | price |\r\n' +
#     '            | Updated Product | This is an updated test product. | 15.0  |\r\n' +
#     '        When the client sends a PUT request to "/api/products/1"\r\n' +
#     '        Then the product with ID 1 should be updated with the provided details',
#   title: 'Update an existing product'
# }
# 

# ********RoostGPT********
config:
  target: '{{ $processEnvironment.API_HOST }}'
  phases:
    - duration: 60
      arrivalRate: 10
  plugins:
    expect: {}
  environments:
    development:
      target: "http://localhost:8080"
    staging:
      target: "http://localhost:8080"
  payload:
    path: "UpdateExistingProduct.csv"
    fields: ["name", "description", "price"]
    skipHeader: true
scenarios:
  - name: "Login to receive authToken"
    flow:
      - post:
          url: "/api/authToken" # Login to receive auth token
          json:
            username: "admin"
            password: "password"
          capture:
            json: "$.token"
            as: "authToken"
          expect:
            - hasProperty: "token"
            - statusCode: 200
        # Pause for a moment before moving to the next action
        # Ensuring that the previous response has been received before issuing the next request
      - think: 1
  - name: "Update an existing product"
    flow:
      - put:
          url: "/api/products/1" # Place to update the product
          headers:
            Authorization: "Bearer {{ authToken }}" # Use received token for authorization
          json: 
            name: "{{ name }}"
            description: "{{ description }}"
            price: "{{ price }}"
          expect:
            - hasProperty: "price"           
            - hasProperty: "description" 
            - hasProperty: "name"            
            - statusCode: 200  # Expecting OK status code as a successful update response
            - equals:          # Ensuring the response contains updated data
              - "{{ response.body.name }}"
              - "{{ name }}"
            - equals:
              - "{{ response.body.description }}"
              - "{{ description }}"
            - equals:
              - "{{ response.body.price }}"
              - "{{ price }}"
