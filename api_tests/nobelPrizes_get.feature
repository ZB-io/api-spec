# ********RoostGPT********

# Test generated by RoostGPT for test karate using AI Type Azure Open AI and AI Model roost-gpt4-32k
# 
# Feature file generated for /nobelPrizes_get for http method type GET 
# RoostTestHash=977dd819cb
# 
# 

# ********RoostGPT********
Feature: Nobel Prizes API Test

Background:
* url '{{ $processEnvironment.API_HOST }}'
* configure headers = { 'Authorization': '#(authToken)' }

Scenario: Verify successful retrieval of Nobel Prizes information
* def authToken = '$processEnvironment.AUTH_TOKEN'
* def validParams = read('nobelPrizes_get.csv')
* path '/2.1/nobelPrizes'
* param validParams
* method get
* status 200

* match response.code == 200
* match response.message == 'Successful call of Nobel Prize(s) according to the filled fields'

* def nobelPrizes = response.data.nobelPrizes
* assert nobelPrizes != null

* match each nobelPrizes contains 
{ 'awardYear': '#number', 'prizeAmount': '#number', 'prizeAmountAdjusted': '#number'}
  
Scenario: Validate error message for incorrect parameters 
* def invalidParams = { 'nobelPrizeYear': 1899, 'yearTo': 1900 }
* path '/2.1/nobelPrizes'
* param invalidParams
* method get
* status 400

* match response.code == '404'
* match response.message == 'There is not Laureate that date'

Scenario: Verify that API resource does not exist
* path '/2.1/nonExistentEndpoint'
* method get
* status 404

* match response.code == '404'
* match response.message == 'There is not Laureate that date'

Scenario: Validate error message for well-formed but semantic errors 
* def unprocessableParams = { 'nobelPrizeYear': 2020, 'yearTo': 2019 }
* path '/2.1/nobelPrizes'
* param unprocessableParams
* method get
* status 422

* match response.code == '404'
* match response.message == 'There is not Laureate that date'
